/* * File: EchoServer.java * Author: Java, Java, Java * Description: This class defines the server object of *  a simple client/server application. The application *  sets up a socket connection between the client and  *  server and simply echos strings input by the user. *  The server object reads a string sent by a client *  and sends the same string back over the socket. */import java.net.*;import java.io.*;public class EchoServer extends ClientServer {    private ServerSocket port;    private Socket socket1, socket2;    /**     * EchoServer() constructor creates a server object given     *  it port number and a number representing the number of     *  clients it can backlog.     * @param portNum -- an int giving the port number     * @param nBacklog -- the number of clients that can backlog     */        public EchoServer(int portNum, int nBacklog)  {        try {            port = new ServerSocket (portNum, nBacklog);        } catch (IOException e) {            e.printStackTrace();        }         }      /**     *  run() defines the server thread's main behavior which is     *   simply to provide service whenever it is requested by a client.      *   Since an I/O exception may result, it is handled here. The     *   server repeatedly accepts a connection from a client and     *   provides it whatever service is defined in provideService().     */    public void run() {        try {            System.out.println("Echo server at "                                + InetAddress.getLocalHost() + " waiting for connections ");            while(true) {                socket1 = port.accept();                socket2 = port.accept();                System.out.println("Accepted a connection from " + socket1.getInetAddress());                System.out.println("Accepted a connection from " + socket2.getInetAddress());                provideService(socket1, socket2);                socket1.close();                socket2.close();                System.out.println("Closed the connection\n");            }        } catch (IOException e) {             e.printStackTrace();        }    } // run()    /**     *  provideService() defines this server's service, which consists     *   of simply echoing whatever string it receives from the client.     *  The server's protocol calls for it to begin by saying hello     *  and end by saying goodbye. Isn't it polite?     */    protected void provideService (Socket socketX, Socket socketO) {        String str="";        try {            writeToSocket(socketX, "XXNNNNNNNNNNNNNNNN00N--");            writeToSocket(socketO, "OXNNNNNNNNNNNNNNNN00N--");            //writeToSocket(socketX, "XX: Hello Socket X, how may I help you?\n");            //writeToSocket(socketO, "OX: Hello Socket O, how may I help you?\n");                                do {                     str = readFromSocket(socketX);                // check for winner and update str                if (str.toLowerCase().equals("goodbye"))                {                    writeToSocket(socketX, "Goodbye\n");                    writeToSocket(socketO, "Goodbye\n");                }                else                {                   // writeToSocket( socketX, "XO: Player X said '" + str + "'\n");                   // writeToSocket( socketO, "OO: Player X said '" + str + "'\n");                    writeToSocket( socketX, "XO" + str.substring(2));                                   writeToSocket( socketO, "OO" + str.substring(2));                                        System.out.println("X sent: " + str);                }                                   str = readFromSocket(socketO);                // check for winner and update str                if (str.toLowerCase().equals("goodbye"))                {                    writeToSocket(socketX, "Goodbye\n");                    writeToSocket(socketO, "Goodbye\n");                }                else                {                    //writeToSocket( socketX, "XX: Player O said '" + str + "'\n");                    //writeToSocket( socketO, "OX: player O said '" + str + "'\n");                    writeToSocket( socketX, "XX" + str.substring(2));                    writeToSocket( socketO, "OX" + str.substring(2));                                 System.out.println("O sent: " + str);                }                                             }  while (!str.toLowerCase().equals("goodbye"));        } catch (IOException e) {            e.printStackTrace();        }    } // provideServer()     /**       *  main() creates an EchoServer at port 10002      */    public static void main(String args[]) {        EchoServer server = new EchoServer(10005,3);              server.start();    } // main()} // EchoServer 